#!/usr/bin/env sh

#
#
#            ••••••••••
#       ••••••••••••••••••••
#     ••••••••••••••••••••••••
#   ••••••••••••••••••••••••••••
#  ••••••••••••••••••••••••••••••
# ••••••••••••••••••••••••••••••••
# ••••••••••••••••••••••••••••••••
#  ••••••••••••••••   •••••••••••
#   •••••••••••••••••   ••••••••
#     •••••••••••••••••   ••••
#       ••••••••••••••••••••
#            ••••••••••      *
#
#          ┏┓ ┏┓ ┏┓ ┳ ┳┓┏┳┓
#          ┃┃ ┃┃ ┃┃ ┃ ┃┃ ┃
#          ┗┣ ┣┛ ┗┛ ┻ ┛┗ ┻
#
# This is an demo script for Qpoint (https://qpoint.io). Please run:
#
#     curl -s https://get.qpoint.io/demo | sudo sh
#
#

set -eu

# configurable variables
VERSION=${VERSION:-latest}

# script variables
OS=
ARCH=

RED=
GREEN=
PURPLE=
BOLD=
DIM=
RESET=
RESET_BOLD=
# terminal output - use colors
if [ -t 1 ]; then
    RED='[0;31m'
    GREEN='[0;32m'
    PURPLE='[0;35m'
    BOLD='[1m'
    DIM='[2m'
    RESET_BOLD='[22m'
    RESET='[0m'
fi

bold() {
    printf "${BOLD}%s${RESET_BOLD}" "$*"
}

action() {
    printf "${PURPLE}→ %s${RESET}\n" "$*"
}

error() {
    printf >&2 "${RED}✗ %s${RESET}\n" "$*"
    exit 1
}

success() {
    printf "${GREEN}✓ %s${RESET}\n" "$*"
}

download_url() {
    printf "https://downloads.qpoint.io/qpoint/qtap-%s-%s-%s.tgz" "$VERSION" "$OS" "$ARCH"
}

setup() {
    case "$(uname -sr)" in
    Linux*Microsoft*)
        error "windows/wsl is not supported"
        ;;

    Linux*)
        OS="linux"
        ;;

    *)
        error "unsupported operating system $(bold "$(uname -sr)")"
        ;;
    esac

    case "$(uname -m)" in
    x86_64)
        ARCH="amd64"
        ;;

    aarch64 | arm64)
        ARCH="arm64"
        ;;

    *)
        error "unsupported architecture $(bold "$(uname -m)")"
        ;;
    esac
}

banner() {
    echo ""
    echo "${PURPLE}           ••••••••••            ${RESET}"
    echo "${PURPLE}      ••••••••••••••••••••       ${RESET}"
    echo "${PURPLE}    ••••••••••••••••••••••••     ${RESET}"
    echo "${PURPLE}  ••••••••••••••••••••••••••••   ${RESET}"
    echo "${PURPLE} ••••••••••••••••••••••••••••••  ${RESET}"
    echo "${PURPLE}•••••••••••••••••••••••••••••••• ${RESET}"
    echo "${PURPLE}•••••••••••••••••••••••••••••••• ${RESET}"
    echo "${PURPLE} ••••••••••••••••   •••••••••••  ${RESET}"
    echo "${PURPLE}  •••••••••••••••••   ••••••••   ${RESET}"
    echo "${PURPLE}    •••••••••••••••••   ••••     ${RESET}"
    echo "${PURPLE}      ••••••••••••••••••••       ${RESET}"
    echo "${PURPLE}           ••••••••••      ${BOLD}*${RESET}"
    echo ""
    echo "${PURPLE}        ┏┓ ┏┓ ┏┓ ┳ ┳┓┏┳┓         ${RESET}"
    echo "${PURPLE}        ┃┃ ┃┃ ┃┃ ┃ ┃┃ ┃          ${RESET}"
    echo "${PURPLE}        ┗┣ ┣┛ ┗┛ ┻ ┛┗ ┻          ${RESET}"
    echo ""
}

install() {
    action "downloading Qtap [$(bold "${VERSION}")]"

    if ! dir=$(mktemp -d); then
        error "failed to create temporary directory"
    fi

    cd "$dir"
    if [ "$(id -u)" = "0" ]; then
        # if we are not running as root, we should NOT clean up
        # so that the user can run qtap manually

        # shellcheck disable=SC2064 # we want $dir to expand now
        trap "rm -rf '$dir'" EXIT INT
    fi

    curl -fsSL "$(download_url)" >qtap.tgz
    tar -xzf qtap.tgz
    mv qtap-* qtap
    chmod +x qtap

    success "successfully extracted $(bold "$(./qtap --version)") to $(bold "$(pwd)/qtap")"
    printf '\n'
}

run() {
    if [ "$(id -u)" != "0" ]; then
        action "please run qtap as root:

    $(bold "sudo $(pwd)/qtap")

"
        exit 0
    fi

    action "running Qtap demo"
    echo ""
    ./qtap
}

banner
setup
install
run
